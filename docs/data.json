{
    "sections": [
        {
            "id": "game-development",
            "title": "Game Development",
            "description": "Use RyleJS to create game mechanics, combat systems, and player progression rules.",
            "examples": [
                {
                    "title": "Basic Combat System",
                    "description": "Create a simple combat system with players and enemies",
                    "codeFile": "game-combat.ts",
                    "tags": ["game", "combat", "classes"]
                },
                {
                    "title": "Item and Inventory System",
                    "description": "Implement items, equipment, and usage rules",
                    "codeFile": "game-inventory.ts",
                    "tags": ["game", "inventory", "items"]
                }
            ]
        },
        {
            "id": "business-logic",
            "title": "Business Logic",
            "description": "Implement business rules for e-commerce, pricing, and workflow management.",
            "examples": [
                {
                    "title": "E-commerce Pricing Rules",
                    "description": "Dynamic pricing with customer tiers and discounts",
                    "codeFile": "business-pricing.ts",
                    "tags": ["business", "pricing", "ecommerce"]
                }
            ]
        },
        {
            "id": "form-validation",
            "title": "Form Validation",
            "description": "Create type-safe validation rules for forms and user input.",
            "examples": [
                {
                    "title": "User Registration Validation",
                    "description": "Comprehensive form validation with custom rules",
                    "codeFile": "form-validation.ts",
                    "tags": ["validation", "forms", "typescript"]
                }
            ]
        },
        {
            "id": "workflow-engine",
            "title": "Workflow Engine",
            "description": "Build workflow systems with conditional logic and state management.",
            "examples": [
                {
                    "title": "Document Approval Workflow",
                    "description": "Multi-step approval process with role-based permissions",
                    "codeFile": "workflow-approval.ts",
                    "tags": ["workflow", "approval", "state-management"]
                }
            ]
        },
        {
            "id": "advanced-patterns",
            "title": "Advanced Patterns",
            "description": "Complex patterns and advanced usage of RyleJS features.",
            "examples": [
                {
                    "title": "Event-Driven System with Middleware",
                    "description": "Build event systems with middleware pipeline",
                    "codeFile": "advanced-events.ts",
                    "tags": ["advanced", "events", "middleware"]
                },
                {
                    "title": "Rule Composition and Chaining",
                    "description": "Create complex rule chains and compositions",
                    "codeFile": "advanced-chaining.ts",
                    "tags": ["advanced", "composition", "chaining"]
                }
            ]
        }
    ],
    "quickStart": {
        "steps": [
            {
                "title": "Import RyleJS",
                "codeFile": "quickstart-import.ts"
            },
            {
                "title": "Create a Class",
                "codeFile": "quickstart-class.ts"
            },
            {
                "title": "Register the Class",
                "codeFile": "quickstart-register.ts"
            },
            {
                "title": "Create Rules",
                "codeFile": "quickstart-rules.ts"
            }
        ]
    },
    "api": {
        "classes": [
            {
                "name": "Ryle",
                "description": "The main class for creating and managing rules with bracket-based syntax.",
                "methods": [
                    {
                        "name": "constructor",
                        "signature": "new Ryle<C extends string>(clause: C, data?: RyleArray<C>)",
                        "description": "Creates a new Ryle instance with the given clause.",
                        "parameters": [
                            {
                                "name": "clause",
                                "type": "C",
                                "description": "The rule clause containing bracketed words"
                            },
                            {
                                "name": "data",
                                "type": "RyleArray<C>",
                                "optional": true,
                                "description": "Pre-parsed array of bracketed words"
                            }
                        ],
                        "codeFile": "api-ryle-constructor.ts"
                    },
                    {
                        "name": "register",
                        "signature": "static register<N extends string, D extends new (...args: any[]) => { readonly __className: string }>(variable: N, definition: D): D",
                        "description": "Registers a class with a variable name for use in rules.",
                        "parameters": [
                            {
                                "name": "variable",
                                "type": "N",
                                "description": "The name to register the class under"
                            },
                            {
                                "name": "definition",
                                "type": "D",
                                "description": "The class constructor to register"
                            }
                        ],
                        "returns": "The registered class constructor.",
                        "codeFile": "api-ryle-register.ts"
                    },
                    {
                        "name": "array",
                        "signature": "array(clause: C): RyleArray<C>",
                        "description": "Extracts bracketed words from a clause string.",
                        "parameters": [
                            {
                                "name": "clause",
                                "type": "C",
                                "description": "The clause to parse"
                            }
                        ],
                        "returns": "An array of words found within brackets.",
                        "codeFile": "api-ryle-array.ts"
                    },
                    {
                        "name": "convert",
                        "signature": "convert(): RyleConvert<RyleArray<C>, C>",
                        "description": "Converts bracketed words to their registered class constructors or default objects.",
                        "returns": "An object mapping each bracketed word to its registered class or a default object.",
                        "codeFile": "api-ryle-convert.ts"
                    },
                    {
                        "name": "handler",
                        "signature": "handler<T extends readonly any[]>(func: (...args: T) => any | void): (dependencies: T) => any",
                        "description": "Creates a handler function that accepts dependencies as a tuple.",
                        "parameters": [
                            {
                                "name": "func",
                                "type": "(...args: T) => any | void",
                                "description": "The function to wrap"
                            }
                        ],
                        "returns": "A function that accepts dependencies as a tuple and calls the wrapped function.",
                        "codeFile": "api-ryle-handler.ts"
                    }
                ]
            },
            {
                "name": "createClass",
                "description": "A utility function for dynamically creating classes with TypeScript support.",
                "signature": "createClass<P extends { [key: string]: any }, T extends string, C extends (this: any, ...args: any[]) => ReturnType<C>>(name: T, constructor: C, properties?: P): CGen<Parameters<C>, P, Capitalize<T>>",
                "parameters": [
                    {
                        "name": "name",
                        "type": "T",
                        "description": "The name of the class to create"
                    },
                    {
                        "name": "constructor",
                        "type": "C",
                        "description": "The constructor function"
                    },
                    {
                        "name": "properties",
                        "type": "P",
                        "optional": true,
                        "description": "Default properties to add to instances"
                    }
                ],
                "returns": "A class constructor with the specified name, constructor logic, and properties.",
                "codeFile": "api-createclass.ts"
            }
        ]
    }
}
